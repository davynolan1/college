


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ExpEval, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000 E3A0600A        LDR              R6, =10
   10 00000004 E3A04000        LDR              R4, =0
   11 00000008 E3A08000        LDR              R8, =0      ;2nd operand
   12 0000000C E3A09000        LDR              R9, =0      ;1st operand
   13 00000010 E3A0A000        LDR              R10, =0     ;operator codes
   14 00000014 E3A03000        LDR              R3, =0
   15 00000018         read
   16 00000018 EBFFFFFE        BL               getkey      ;read key from cons
                                                            ole
   17 0000001C E350000D        CMP              R0, #0x0D   ;while (key != CR)
   18 00000020 0A000010        BEQ              endRead     ;{
   19 00000024 E350002B        CMP              R0, #0x2B   ;compare read key t
                                                            o '+'
   20 00000028 0A000014        BEQ              addition    ;branch to addition
                                                             if '+' is entered
   21 0000002C E350002D        CMP              R0, #0x2D   ;compare read key t
                                                            o '-'
   22 00000030 0A000019        BEQ              subtraction ;branch to subtract
                                                            ion if '-' is enter
                                                            ed
   23 00000034 E350002A        CMP              R0, #0x2A   ;compare read key t
                                                            o '*'
   24 00000038 0A00001E        BEQ              multiplication ;branch to multi
                                                            plication if '*' is
                                                             entered
   25 0000003C EBFFFFFE        BL               sendchar    ;echo key back to c
                                                            onsole
   26 00000040         
   27 00000040         
   28 00000040 E0040496        MUL              R4, R6, R4  ;result = result x 
                                                            10
   29 00000044 E2405030        SUB              R5, R0, #0x30 ;convert ascii to
                                                             numeric
   30 00000048 E0844005        ADD              R4, R4, R5  ;result = result + 
                                                            value
   31 0000004C         
   32 0000004C E35A0000        CMP              R10, #0     ; while ( R10 < 0)
   33 00000050 8A000001        BHI              operand2    ; {
   34 00000054 E1A09004        MOV              R9, R4      ; make R4 the first
                                                             operand
   35 00000058 EAFFFFEE        B                read        ; }
   36 0000005C         
   37 0000005C         operand2
   38 0000005C E1A08004        MOV              R8, R4      ; make R4 the secon
                                                            d operand
   39 00000060 E3A03001        MOV              R3, #1      ; give R3 the value
                                                             of 1
   40 00000064 EAFFFFEB        B                read
   41 00000068         
   42 00000068         endRead
   43 00000068 E35A0001        CMP              R10, #1     ; while (R10 != 1)



ARM Macro Assembler    Page 2 


   44 0000006C 0A000003        BEQ              addition    ; {
   45 00000070 E35A0002        CMP              R10, #2     ;   while (R10 != 1
                                                            )
   46 00000074 0A000008        BEQ              subtraction ;   {
   47 00000078 E35A0003        CMP              R10, #3     ;     while (R10 !=
                                                             3)
   48 0000007C 0A00000D        BEQ              multiplication ;     {
   49 00000080         
   50 00000080         
   51 00000080         
   52 00000080         addition
   53 00000080 EBFFFFFE        BL               sendchar    ;echo key back to c
                                                            onsole
   54 00000084 E3A04000        LDR              R4, =0      ;update R4 to 0
   55 00000088 E3A0A001        LDR              R10, =1     ;update R10 to 1
   56 0000008C E3530000        CMP              R3, #0      ;while (R3 != 0)
   57 00000090 0AFFFFE0        BEQ              read        ;{
   58 00000094 E0895008        ADD              R5, R9, R8  ;add 1st operand to
                                                             2nd operand and st
                                                            ore result in R5
   59 00000098 EAFFFFDE        B                read        ;}
   60 0000009C         
   61 0000009C         subtraction
   62 0000009C EBFFFFFE        BL               sendchar    ;echo key back to c
                                                            onsole
   63 000000A0 E3A04000        LDR              R4, =0      ;update R4 to 0
   64 000000A4 E3A0A002        LDR              R10, =2     ;update R10 to 2
   65 000000A8 E3530000        CMP              R3, #0      ;while (R3 != 0)
   66 000000AC 0AFFFFD9        BEQ              read        ;{
   67 000000B0 E0495008        SUB              R5, R9, R8  ;subtract 1st opera
                                                            nd from 2nd operand
                                                             and store result i
                                                            n R5
   68 000000B4 EAFFFFD7        B                read        ;}
   69 000000B8         
   70 000000B8         multiplication
   71 000000B8 EBFFFFFE        BL               sendchar    ;echo key back to c
                                                            onsole
   72 000000BC E3A04000        LDR              R4, =0      ;update R4 to 0
   73 000000C0 E3A0A003        LDR              R10, =3     ;update R10 to 3
   74 000000C4 E3530000        CMP              R3, #0      ;while (R3 != 0)
   75 000000C8 0AFFFFD2        BEQ              read        ;{
   76 000000CC E0050899        MUL              R5, R9, R8  ;multiply 1st opera
                                                            nd by 2nd operand a
                                                            nd store result in 
                                                            R5
   77 000000D0 EAFFFFD0        B                read        ;}
   78 000000D4         
   79 000000D4 EAFFFFFE 
                       stop    B                stop
   80 000000D8         
   81 000000D8                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\e
xpeval.d -o.\expeval.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include
 -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROL
IB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO_CLOCK_SETUP
 SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --pr
edefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\expeval.lst ExpEv
al.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ExpEval 00000000

Symbol: ExpEval
   Definitions
      At line 1 in file ExpEval.s
   Uses
      None
Comment: ExpEval unused
addition 00000080

Symbol: addition
   Definitions
      At line 52 in file ExpEval.s
   Uses
      At line 20 in file ExpEval.s
      At line 44 in file ExpEval.s

endRead 00000068

Symbol: endRead
   Definitions
      At line 42 in file ExpEval.s
   Uses
      At line 18 in file ExpEval.s
Comment: endRead used once
multiplication 000000B8

Symbol: multiplication
   Definitions
      At line 70 in file ExpEval.s
   Uses
      At line 24 in file ExpEval.s
      At line 48 in file ExpEval.s

operand2 0000005C

Symbol: operand2
   Definitions
      At line 37 in file ExpEval.s
   Uses
      At line 33 in file ExpEval.s
Comment: operand2 used once
read 00000018

Symbol: read
   Definitions
      At line 15 in file ExpEval.s
   Uses
      At line 35 in file ExpEval.s
      At line 40 in file ExpEval.s
      At line 57 in file ExpEval.s
      At line 59 in file ExpEval.s
      At line 66 in file ExpEval.s
      At line 68 in file ExpEval.s
      At line 75 in file ExpEval.s
      At line 77 in file ExpEval.s

start 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: start
   Definitions
      At line 8 in file ExpEval.s
   Uses
      At line 5 in file ExpEval.s
Comment: start used once
stop 000000D4

Symbol: stop
   Definitions
      At line 79 in file ExpEval.s
   Uses
      At line 79 in file ExpEval.s
Comment: stop used once
subtraction 0000009C

Symbol: subtraction
   Definitions
      At line 61 in file ExpEval.s
   Uses
      At line 22 in file ExpEval.s
      At line 46 in file ExpEval.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file ExpEval.s
   Uses
      At line 16 in file ExpEval.s
Comment: getkey used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file ExpEval.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file ExpEval.s
   Uses
      At line 25 in file ExpEval.s
      At line 53 in file ExpEval.s
      At line 62 in file ExpEval.s
      At line 71 in file ExpEval.s

3 symbols
350 symbols in table
