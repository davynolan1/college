


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000         
    5 00000000         
    6 00000000                 EXPORT           start
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         
   11 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010  ;memory location of
                                                             pin status registe
                                                            r
   12 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   13 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   14 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   15 00000000         
   16 00000000 E59F3350        LDR              R3,=IO1PIN  ;load memory locati
                                                            on of pin status re
                                                            gister to R3
   17 00000004 E59F1350        ldr              r1,=IO1DIR
   18 00000008 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   19 0000000C E5812000        str              r2,[r1]     ;make them outputs
   20 00000010 E59F1348        ldr              r1,=IO1SET
   21 00000014 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   22 00000018 E59F2344        ldr              r2,=IO1CLR
   23 0000001C         ; r1 points to the SET register
   24 0000001C         ; r2 points to the CLEAR register
   25 0000001C E3A04000        LDR              R4, =0      ;num
   26 00000020 E3A05000        LDR              R5, =0      ;result
   27 00000024 E3A06000        LDR              R6, =0      ;state (S0=begining
                                                            , S1=sign input, S2
                                                            =number input S3=cl
                                                            ear op)
   28 00000028 E3A0B000        LDR              R11, =0     ;sign ("1"="+"  "0"
                                                            ="-")
   29 0000002C         
   30 0000002C         
   31 0000002C         infiniteloop
   32 0000002C EB0000A3        BL               shortdelay  ;calls short delay 
                                                            function, need a de
                                                            lay between inputs 
                                                            to avoid double cli
                                                            cks
   33 00000030 E3A00000        LDR              R0, =0      ;pressIndex=0
   34 00000034 EB0000A6        BL               checkPress  ;checkPress(pressIn
                                                            dex)
   35 00000038         
   36 00000038         
   37 00000038 E3500014        CMP              R0, #20     ;if(key pressed==20
                                                            ){ 
   38 0000003C 1A00000F        BNE              skip2
   39 00000040 E3560000        CMP              R6, #0      ;checking if state=



ARM Macro Assembler    Page 2 


                                                            =0
   40 00000044 0A000005        BEQ              state00
   41 00000048 E3560001        CMP              R6, #1      ;checking if state=
                                                            =1
   42 0000004C 0A000005        BEQ              state01
   43 00000050 E3560002        CMP              R6, #2      ;checking if state=
                                                            =2
   44 00000054 0A000007        BEQ              state02
   45 00000058 E3560003        CMP              R6, #3      ;checking if state=
                                                            =3
   46 0000005C 0AFFFFF2        BEQ              infiniteloop
   47 00000060         state00                              ;if (state==0){
   48 00000060 E2844001        ADD              R4, R4, #1  ;num++
   49 00000064 EAFFFFF0        B                infiniteloop ;}
   50 00000068         state01                              ;else if (state==1)
                                                            {
   51 00000068 EB000090        BL               clearLED    ;clearLEDs
   52 0000006C E2844001        ADD              R4, R4, #1  ;num++
   53 00000070 E3A06002        MOV              R6, #2      ;state=2
   54 00000074 EAFFFFEC        B                infiniteloop ;}
   55 00000078         state02                              ;else if (state==2)
                                                            {
   56 00000078 E2844001        ADD              R4, R4, #1  ;num++
   57 0000007C EAFFFFEA        B                infiniteloop ;}
   58 00000080         ;} 
   59 00000080         skip2
   60 00000080 E3500015        CMP              R0, #21     ;if(key pressed==21
                                                            ){
   61 00000084 1A00000F        BNE              skip3
   62 00000088 E3560000        CMP              R6, #0      ;checking if state=
                                                            =0
   63 0000008C 0A000005        BEQ              state10
   64 00000090 E3560001        CMP              R6, #1      ;checking if state=
                                                            =1
   65 00000094 0A000005        BEQ              state11
   66 00000098 E3560002        CMP              R6, #2      ;checking if state=
                                                            =2
   67 0000009C 0A000007        BEQ              state12
   68 000000A0 E3560003        CMP              R6, #3      ;checking if state=
                                                            =3
   69 000000A4 0AFFFFE0        BEQ              infiniteloop
   70 000000A8         state10                              ;if (state==0){
   71 000000A8 E2444001        SUB              R4, R4, #1  ;num--
   72 000000AC EAFFFFDE        B                infiniteloop ;}
   73 000000B0         state11                              ;else if (state==1)
                                                            {
   74 000000B0 EB00007E        BL               clearLED    ;clearLEDs
   75 000000B4 E2444001        SUB              R4, R4, #1  ;num--
   76 000000B8 E3A06002        MOV              R6, #2      ;state=2
   77 000000BC EAFFFFDA        B                infiniteloop ;}
   78 000000C0         state12                              ;else if (state==2)
                                                            {
   79 000000C0 E2444001        SUB              R4, R4, #1  ;num++
   80 000000C4 EAFFFFD8        B                infiniteloop ;}
   81 000000C8         ;}
   82 000000C8         
   83 000000C8         
   84 000000C8         skip3                                ;if(key pressed==22
                                                            ){



ARM Macro Assembler    Page 3 


   85 000000C8 E3500016        CMP              R0, #22
   86 000000CC 1A000026        BNE              skip4
   87 000000D0 E3560000        CMP              R6, #0
   88 000000D4 0A000005        BEQ              state20
   89 000000D8 E3560001        CMP              R6, #1
   90 000000DC 0AFFFFD2        BEQ              infiniteloop
   91 000000E0 E3560002        CMP              R6, #2
   92 000000E4 0A000006        BEQ              state22
   93 000000E8 E3560003        CMP              R6, #3
   94 000000EC 0A00001A        BEQ              state23
   95 000000F0         state20                              ;if (state==0){
   96 000000F0 E1A05004        MOV              R5, R4      ;result=num
   97 000000F4 E3A04000        MOV              R4, #0      ;num=0
   98 000000F8 E3A06001        MOV              R6, #1      ;state=1
   99 000000FC E3A0B001        MOV              R11, #1     ;sign=+
  100 00000100 EAFFFFC9        B                infiniteloop ;}
  101 00000104         state22                              ;else if (state==2)
                                                            {
  102 00000104 E35B0001        CMP              R11, #1     ;if (sign==-){
  103 00000108 0A000001        BEQ              additionA
  104 0000010C E0455004        SUB              R5, R5, R4  ;result=result-num
  105 00000110 EA000000        B                subtractionA ;}
  106 00000114         additionA                            ;else{
  107 00000114 E0855004        ADD              R5, R5, R4  ;result=result+num
  108 00000118         subtractionA                         ;}
  109 00000118 E3A04000        MOV              R4, #0      ;num=0
  110 0000011C E3A06001        MOV              R6, #1      ;state=1
  111 00000120 E3A07004        LDR              R7, =4      ;inversionCount=4;
  112 00000124 E3A08000        LDR              R8, =0      ;invertedDigit=0;
  113 00000128 E1A09005        MOV              R9, R5      ;tmp=result
  114 0000012C         invertA                              ;while(inversionCou
                                                            nt>0){
  115 0000012C E3570000        CMP              R7, #0
  116 00000130 0A000005        BEQ              endInvertA
  117 00000134 E1B090A9        MOVS             R9, R9, LSR#1 ;tmp=tmp>>1
  118 00000138 3A000000        BCC              nobitA      ;if(carry flag set)
                                                            {
  119 0000013C E3888001        ORR              R8, R8, #1  ;result || 1
  120 00000140         nobitA                               ;}
  121 00000140 E1A08088        MOV              R8, R8, LSL#1 ;result=result<<1
                                                            
  122 00000144 E2477001        SUB              R7, R7, #1  ;inversionCount--;
  123 00000148 EAFFFFF7        B                invertA
  124 0000014C         endInvertA                           ;}
  125 0000014C E1A08788        MOV              R8, R8, LSL#15 
                                                            ;result=result<<15
  126 00000150 E5828000        STR              R8, [R2]    ;set LED display
  127 00000154 E3A0B001        MOV              R11, #1     ;sign=+
  128 00000158 EAFFFFB3        B                infiniteloop ;}
  129 0000015C         state23                              ;else if (state==3)
                                                            {
  130 0000015C E3A04000        MOV              R4, #0      ;num=0
  131 00000160 E3A06001        MOV              R6, #1      ;state=1
  132 00000164 E3A0B001        MOV              R11, #1     ;sign=+
  133 00000168 EAFFFFAF        B                infiniteloop ;}
  134 0000016C         ;}
  135 0000016C         
  136 0000016C         skip4
  137 0000016C E3500017        CMP              R0, #23



ARM Macro Assembler    Page 4 


  138 00000170 1A000026        BNE              skip5
  139 00000174 E3560000        CMP              R6, #0
  140 00000178 0A000005        BEQ              state30
  141 0000017C E3560001        CMP              R6, #1
  142 00000180 0AFFFFA9        BEQ              infiniteloop
  143 00000184 E3560002        CMP              R6, #2
  144 00000188 0A000006        BEQ              state32
  145 0000018C E3560003        CMP              R6, #3
  146 00000190 0A00001A        BEQ              state33
  147 00000194         state30                              ;if (state==0){
  148 00000194 E1A05004        MOV              R5, R4      ;result=num
  149 00000198 E3A04000        MOV              R4, #0      ;num=0
  150 0000019C E3A06001        MOV              R6, #1      ;state=1
  151 000001A0 E3A0B000        MOV              R11, #0     ;sign=-
  152 000001A4 EAFFFFA0        B                infiniteloop ;}
  153 000001A8         state32                              ;else if (state==2)
                                                            {
  154 000001A8 E35B0001        CMP              R11, #1     ;if (sign==-){
  155 000001AC 0A000001        BEQ              additionB
  156 000001B0 E0455004        SUB              R5, R5, R4  ;result=result-num
  157 000001B4 EA000000        B                subtractionB ;}
  158 000001B8         additionB                            ;else{
  159 000001B8 E0855004        ADD              R5, R5, R4  ;result=result+num
  160 000001BC         subtractionB                         ;}
  161 000001BC E3A04000        MOV              R4, #0      ;num=0
  162 000001C0 E3A06001        MOV              R6, #1      ;state=1
  163 000001C4 E3A07004        LDR              R7, =4      ;inversionCount=4;
  164 000001C8 E3A08000        LDR              R8, =0      ;invertedDigit=0;
  165 000001CC E1A09005        MOV              R9, R5      ;tmp=result
  166 000001D0         invertB                              ;while(inversionCou
                                                            nt>0){
  167 000001D0 E3570000        CMP              R7, #0
  168 000001D4 0A000005        BEQ              endInvertB
  169 000001D8 E1B090A9        MOVS             R9, R9, LSR#1 ;tmp=tmp>>1
  170 000001DC 3A000000        BCC              nobitB      ;if(carry flag set)
                                                            {
  171 000001E0 E3888001        ORR              R8, R8, #1  ;result || 1
  172 000001E4         nobitB                               ;}
  173 000001E4 E1A08088        MOV              R8, R8, LSL#1 ;result=result<<1
                                                            
  174 000001E8 E2477001        SUB              R7, R7, #1  ;inversionCount--;
  175 000001EC EAFFFFF7        B                invertB
  176 000001F0         endInvertB                           ;}
  177 000001F0 E1A08788        MOV              R8, R8, LSL#15 
                                                            ;result=result<<15
  178 000001F4 E5828000        STR              R8, [R2]    ;set LED display
  179 000001F8 E3A0B000        MOV              R11, #0     ;sign=-
  180 000001FC EAFFFF8A        B                infiniteloop ;}
  181 00000200         state33                              ;else if (state==3)
                                                            {
  182 00000200 E3A04000        MOV              R4, #0      ;num=0
  183 00000204 E3A06001        MOV              R6, #1      ;state=1
  184 00000208 E3A0B000        MOV              R11, #0     ;sign=-
  185 0000020C EAFFFF86        B                infiniteloop ;}
  186 00000210         ;}
  187 00000210         skip5
  188 00000210 E3700016        CMP              R0, #-22
  189 00000214 1A000010        BNE              skip6
  190 00000218 EB00001E        BL               flashLEDC



ARM Macro Assembler    Page 5 


  191 0000021C E3560000        CMP              R6, #0
  192 00000220 0A000005        BEQ              state40
  193 00000224 E3560001        CMP              R6, #1
  194 00000228 0A000005        BEQ              state41
  195 0000022C E3560002        CMP              R6, #2
  196 00000230 0A000006        BEQ              state42
  197 00000234 E3560003        CMP              R6, #3
  198 00000238 0AFFFF7B        BEQ              infiniteloop
  199 0000023C         state40
  200 0000023C E3A04000        MOV              R4, #0
  201 00000240 EAFFFF79        B                infiniteloop
  202 00000244         state41
  203 00000244 E3A04000        MOV              R4, #0
  204 00000248 E3A06003        MOV              R6, #3
  205 0000024C EAFFFF76        B                infiniteloop
  206 00000250         state42
  207 00000250 E3A04000        MOV              R4, #0
  208 00000254 E3A06003        MOV              R6, #3
  209 00000258 EAFFFF73        B                infiniteloop
  210 0000025C         
  211 0000025C         
  212 0000025C         skip6
  213 0000025C E3700017        CMP              R0, #-23
  214 00000260 1AFFFF71        BNE              infiniteloop
  215 00000264 EB000005        BL               flashLEDCA
  216 00000268 E3A04000        MOV              R4, #0
  217 0000026C E3A05000        MOV              R5, #0
  218 00000270 E3A06000        MOV              R6, #0
  219 00000274 E3A0B000        MOV              R11, #0
  220 00000278 EAFFFF6B        B                infiniteloop
  221 0000027C         
  222 0000027C EAFFFFFE 
                       stop    B                stop
  223 00000280         
  224 00000280         flashLEDCA
  225 00000280 E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
  226 00000284 E3A0480F        LDR              R4, =0x000F0000 
                                                            ;load diplayCode
  227 00000288 E5824000        STR              R4, [R2]    ;clear LEDs
  228 0000028C EB00000B        BL               shortdelay
  229 00000290 EB000006        BL               clearLED
  230 00000294 E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
  231 00000298         
  232 00000298         flashLEDC
  233 00000298 E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
  234 0000029C E3A0480A        LDR              R4, =0x000A0000 
                                                            ;load diplayCode
  235 000002A0 E5824000        STR              R4, [R2]    ;clear LEDs
  236 000002A4 EB000005        BL               shortdelay
  237 000002A8 EB000000        BL               clearLED
  238 000002AC E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
  239 000002B0         
  240 000002B0         
  241 000002B0         clearLED
  242 000002B0 E92D4010        STMFD            SP!, {R4, LR} ;save registers t



ARM Macro Assembler    Page 6 


                                                            o stack
  243 000002B4 E3A0480F        LDR              R4, =0x000F0000 
                                                            ;load diplayCode
  244 000002B8 E5814000        STR              R4, [R1]    ;clear LEDs
  245 000002BC E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
  246 000002C0         
  247 000002C0         shortdelay
  248 000002C0 E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
  249 000002C4 E59F409C        LDR              R4, =1000000 ;delaycount=100000
                                                            00 
  250 000002C8         dloopshort                           ;while(delaycount>0
                                                            ){
  251 000002C8 E2544001        SUBS             R4, R4, #1  ;delaycount--;
  252 000002CC 1AFFFFFD        BNE              dloopshort  ;}
  253 000002D0 E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
  254 000002D4         
  255 000002D4         ;parameters
  256 000002D4         ;R3: Pin Value Reg(p20-23)
  257 000002D4         ;return
  258 000002D4         ;R0: result
  259 000002D4         checkPress
  260 000002D4 E92D47F0        STMFD            SP!, {R4-R10, LR}
  261 000002D8 E3A07000        LDR              R7, =0      ;isLong=false
  262 000002DC E3A0460F        LDR              R4, =0x00F00000 ;mask
  263 000002E0 E3E09000        LDR              R9, =0xFFFFFFFF
  264 000002E4 E593A000        LDR              R10, [r3]
  265 000002E8 E02A5009        EOR              R5, R10, R9
  266 000002EC E0055004        AND              R5, R5, R4
  267 000002F0 E3550000        CMP              R5, #0
  268 000002F4 0A000016        BEQ              endCheck
  269 000002F8 E3550502        CMP              R5, #0x00800000
  270 000002FC CA000014        BGT              endCheck
  271 00000300 E59F6064        LDR              R6, = 2000000 ;around 2 second 
                                                            timer
  272 00000304         while
  273 00000304 E3E09000        LDR              R9, =0xFFFFFFFF
  274 00000308 E593A000        LDR              R10, [r3]
  275 0000030C E02A9009        EOR              R9, R10, R9
  276 00000310 E0099004        AND              R9, R9, R4
  277 00000314 E2466001        SUB              R6, R6, #1
  278 00000318 E1590005        CMP              R9, R5
  279 0000031C 1A000000        BNE              endLoop
  280 00000320 EAFFFFF7        B                while
  281 00000324         endLoop
  282 00000324 E3560000        CMP              R6, #0
  283 00000328 CA000000        BGT              endShort
  284 0000032C E3A07001        MOV              R7, #1      ;isLong=true
  285 00000330         endShort
  286 00000330 E3A08000        LDR              R8, =0      ;count 
  287 00000334         count
  288 00000334 E1B050A5        MOVS             R5, R5, LSR#1
  289 00000338 2A000001        BCS              endCount
  290 0000033C E2888001        ADD              R8, R8, #1
  291 00000340 EAFFFFFB        B                count
  292 00000344         endCount
  293 00000344 E1A00008        MOV              R0, R8



ARM Macro Assembler    Page 7 


  294 00000348 E3570000        CMP              R7, #0
  295 0000034C 0A000000        BEQ              notLong
  296 00000350 E2600000        NEG              R0, R0
  297 00000354         notLong
  298 00000354         endCheck
  299 00000354 E8BD87F0        LDMFD            SP!, {R4-R10, PC}
  300 00000358         
  301 00000358 E0028010 
              E0028018 
              E0028014 
              E002801C 
              000F4240 
              001E8480         AREA             ProgramData, DATA, READWRITE
  302 00000000         
  303 00000000                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
additionA 00000114

Symbol: additionA
   Definitions
      At line 106 in file App.s
   Uses
      At line 103 in file App.s
Comment: additionA used once
additionB 000001B8

Symbol: additionB
   Definitions
      At line 158 in file App.s
   Uses
      At line 155 in file App.s
Comment: additionB used once
checkPress 000002D4

Symbol: checkPress
   Definitions
      At line 259 in file App.s
   Uses
      At line 34 in file App.s
Comment: checkPress used once
clearLED 000002B0

Symbol: clearLED
   Definitions
      At line 241 in file App.s
   Uses
      At line 51 in file App.s
      At line 74 in file App.s
      At line 229 in file App.s
      At line 237 in file App.s

count 00000334

Symbol: count
   Definitions
      At line 287 in file App.s
   Uses
      At line 291 in file App.s
Comment: count used once
dloopshort 000002C8

Symbol: dloopshort
   Definitions
      At line 250 in file App.s
   Uses
      At line 252 in file App.s
Comment: dloopshort used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

endCheck 00000354

Symbol: endCheck
   Definitions
      At line 298 in file App.s
   Uses
      At line 268 in file App.s
      At line 270 in file App.s

endCount 00000344

Symbol: endCount
   Definitions
      At line 292 in file App.s
   Uses
      At line 289 in file App.s
Comment: endCount used once
endInvertA 0000014C

Symbol: endInvertA
   Definitions
      At line 124 in file App.s
   Uses
      At line 116 in file App.s
Comment: endInvertA used once
endInvertB 000001F0

Symbol: endInvertB
   Definitions
      At line 176 in file App.s
   Uses
      At line 168 in file App.s
Comment: endInvertB used once
endLoop 00000324

Symbol: endLoop
   Definitions
      At line 281 in file App.s
   Uses
      At line 279 in file App.s
Comment: endLoop used once
endShort 00000330

Symbol: endShort
   Definitions
      At line 285 in file App.s
   Uses
      At line 283 in file App.s
Comment: endShort used once
flashLEDC 00000298

Symbol: flashLEDC
   Definitions
      At line 232 in file App.s
   Uses
      At line 190 in file App.s
Comment: flashLEDC used once
flashLEDCA 00000280




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: flashLEDCA
   Definitions
      At line 224 in file App.s
   Uses
      At line 215 in file App.s
Comment: flashLEDCA used once
infiniteloop 0000002C

Symbol: infiniteloop
   Definitions
      At line 31 in file App.s
   Uses
      At line 46 in file App.s
      At line 49 in file App.s
      At line 54 in file App.s
      At line 57 in file App.s
      At line 69 in file App.s
      At line 72 in file App.s
      At line 77 in file App.s
      At line 80 in file App.s
      At line 90 in file App.s
      At line 100 in file App.s
      At line 128 in file App.s
      At line 133 in file App.s
      At line 142 in file App.s
      At line 152 in file App.s
      At line 180 in file App.s
      At line 185 in file App.s
      At line 198 in file App.s
      At line 201 in file App.s
      At line 205 in file App.s
      At line 209 in file App.s
      At line 214 in file App.s
      At line 220 in file App.s

invertA 0000012C

Symbol: invertA
   Definitions
      At line 114 in file App.s
   Uses
      At line 123 in file App.s
Comment: invertA used once
invertB 000001D0

Symbol: invertB
   Definitions
      At line 166 in file App.s
   Uses
      At line 175 in file App.s
Comment: invertB used once
nobitA 00000140

Symbol: nobitA
   Definitions
      At line 120 in file App.s
   Uses
      At line 118 in file App.s
Comment: nobitA used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

nobitB 000001E4

Symbol: nobitB
   Definitions
      At line 172 in file App.s
   Uses
      At line 170 in file App.s
Comment: nobitB used once
notLong 00000354

Symbol: notLong
   Definitions
      At line 297 in file App.s
   Uses
      At line 295 in file App.s
Comment: notLong used once
shortdelay 000002C0

Symbol: shortdelay
   Definitions
      At line 247 in file App.s
   Uses
      At line 32 in file App.s
      At line 228 in file App.s
      At line 236 in file App.s

skip2 00000080

Symbol: skip2
   Definitions
      At line 59 in file App.s
   Uses
      At line 38 in file App.s
Comment: skip2 used once
skip3 000000C8

Symbol: skip3
   Definitions
      At line 84 in file App.s
   Uses
      At line 61 in file App.s
Comment: skip3 used once
skip4 0000016C

Symbol: skip4
   Definitions
      At line 136 in file App.s
   Uses
      At line 86 in file App.s
Comment: skip4 used once
skip5 00000210

Symbol: skip5
   Definitions
      At line 187 in file App.s
   Uses
      At line 138 in file App.s
Comment: skip5 used once
skip6 0000025C



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: skip6
   Definitions
      At line 212 in file App.s
   Uses
      At line 189 in file App.s
Comment: skip6 used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file App.s
   Uses
      At line 6 in file App.s
Comment: start used once
state00 00000060

Symbol: state00
   Definitions
      At line 47 in file App.s
   Uses
      At line 40 in file App.s
Comment: state00 used once
state01 00000068

Symbol: state01
   Definitions
      At line 50 in file App.s
   Uses
      At line 42 in file App.s
Comment: state01 used once
state02 00000078

Symbol: state02
   Definitions
      At line 55 in file App.s
   Uses
      At line 44 in file App.s
Comment: state02 used once
state10 000000A8

Symbol: state10
   Definitions
      At line 70 in file App.s
   Uses
      At line 63 in file App.s
Comment: state10 used once
state11 000000B0

Symbol: state11
   Definitions
      At line 73 in file App.s
   Uses
      At line 65 in file App.s
Comment: state11 used once
state12 000000C0

Symbol: state12
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 78 in file App.s
   Uses
      At line 67 in file App.s
Comment: state12 used once
state20 000000F0

Symbol: state20
   Definitions
      At line 95 in file App.s
   Uses
      At line 88 in file App.s
Comment: state20 used once
state22 00000104

Symbol: state22
   Definitions
      At line 101 in file App.s
   Uses
      At line 92 in file App.s
Comment: state22 used once
state23 0000015C

Symbol: state23
   Definitions
      At line 129 in file App.s
   Uses
      At line 94 in file App.s
Comment: state23 used once
state30 00000194

Symbol: state30
   Definitions
      At line 147 in file App.s
   Uses
      At line 140 in file App.s
Comment: state30 used once
state32 000001A8

Symbol: state32
   Definitions
      At line 153 in file App.s
   Uses
      At line 144 in file App.s
Comment: state32 used once
state33 00000200

Symbol: state33
   Definitions
      At line 181 in file App.s
   Uses
      At line 146 in file App.s
Comment: state33 used once
state40 0000023C

Symbol: state40
   Definitions
      At line 199 in file App.s
   Uses
      At line 192 in file App.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Comment: state40 used once
state41 00000244

Symbol: state41
   Definitions
      At line 202 in file App.s
   Uses
      At line 194 in file App.s
Comment: state41 used once
state42 00000250

Symbol: state42
   Definitions
      At line 206 in file App.s
   Uses
      At line 196 in file App.s
Comment: state42 used once
stop 0000027C

Symbol: stop
   Definitions
      At line 222 in file App.s
   Uses
      At line 222 in file App.s
Comment: stop used once
subtractionA 00000118

Symbol: subtractionA
   Definitions
      At line 108 in file App.s
   Uses
      At line 105 in file App.s
Comment: subtractionA used once
subtractionB 000001BC

Symbol: subtractionB
   Definitions
      At line 160 in file App.s
   Uses
      At line 157 in file App.s
Comment: subtractionB used once
while 00000304

Symbol: while
   Definitions
      At line 272 in file App.s
   Uses
      At line 280 in file App.s
Comment: while used once
47 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ProgramData 00000000

Symbol: ProgramData
   Definitions
      At line 301 in file App.s
   Uses
      None
Comment: ProgramData unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 14 in file App.s
   Uses
      At line 22 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 12 in file App.s
   Uses
      At line 17 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 11 in file App.s
   Uses
      At line 16 in file App.s
Comment: IO1PIN used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 13 in file App.s
   Uses
      At line 20 in file App.s
Comment: IO1SET used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
388 symbols in table
