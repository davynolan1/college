


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             IntegerDisplay, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000                 EXPORT           start
    5 00000000         start
    6 00000000 E59F0174        LDR              R0, =-123456 ;load test value
    7 00000004 E3500000        CMP              R0, #0      ;if(testvalue<0){
    8 00000008 CA000001        BGT              notNegative ;boolean isNegative
                                                            =1;
    9 0000000C E3A08001        LDR              R8, =1      ;testvalue=testvalu
                                                            e*-1;
   10 00000010 E2600000        NEG              R0, R0      ;}
   11 00000014         notNegative
   12 00000014 EB00003A        BL               digitise    ;digitise(testValue
                                                            )
   13 00000018         
   14 00000018         
   15 00000018         
   16 00000018 E0028018 
                       IO1DIR  EQU              0xE0028018
   17 00000018 E0028014 
                       IO1SET  EQU              0xE0028014
   18 00000018 E002801C 
                       IO1CLR  EQU              0xE002801C
   19 00000018         
   20 00000018 E59F1160        ldr              r1,=IO1DIR
   21 0000001C E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
   22 00000020 E5812000        str              r2,[r1]     ;make them outputs
   23 00000024 E59F1158        ldr              r1,=IO1SET
   24 00000028 E5812000        str              r2,[r1]     ;set them to turn t
                                                            he LEDs off
   25 0000002C E59F2154        ldr              r2,=IO1CLR
   26 00000030         ; r1 points to the SET register
   27 00000030         ; r2 points to the CLEAR register
   28 00000030         
   29 00000030         
   30 00000030         
   31 00000030         infiniteloop                         ;while(true){
   32 00000030 E59F4154        LDR              R4, =DIGITS ;load start address
                                                             of digits
   33 00000034 EB00001C        BL               clearLED    ;clearLED();
   34 00000038 EB00001F        BL               delay       ;delay();
   35 0000003C E3580001        CMP              R8, #1      ;if(isNegative){
   36 00000040 1A000001        BNE              positive    ;displayCode=1011;
   37 00000044 E3A0380D        LDR              R3, =0x000D0000 ;}
   38 00000048 EA000000        B                negative    ;else{
   39 0000004C         positive                             ;displayCode=1010;
   40 0000004C E3A03805        LDR              R3, =0x00050000 ;}
   41 00000050         negative
   42 00000050 E5823000        STR              R3, [R2]    ;set LED display 
   43 00000054 EB000018        BL               delay       ;delay();
   44 00000058         digitLoop                            ;while(digit!=0xE){
                                                            
   45 00000058 E4945004        LDR              R5, [R4], #4 ;load digit and in
                                                            crement the address
                                                             value by 4 (to go 
                                                            to next digit)
   46 0000005C E355000E        CMP              R5, #0xE    ;



ARM Macro Assembler    Page 2 


   47 00000060 0A00000F        BEQ              endDigitL   ;
   48 00000064 EB000010        BL               clearLED    ;clearLED()
   49 00000068 E3A0A003        LDR              R10, =3     ;inversionCount=3;
   50 0000006C E3A06000        LDR              R6, =0      ;invertedDigit=0;
   51 00000070         invert                               ;while(inversionCou
                                                            nt>0){
   52 00000070 E3A09001        LDR              R9, =1      ;mask=1;
   53 00000074 E0059009        AND              R9, R5, R9  ;mask=digit & mask;
                                                            
   54 00000078 E1866009        ORR              R6, R6, R9  ;invertedValue=iver
                                                            tedValue | mask;
   55 0000007C E35A0000        CMP              R10, #0
   56 00000080 0A000003        BEQ              endInvert
   57 00000084 E1A050A5        MOV              R5, R5, LSR#1 ;digit=digit>>1;
   58 00000088 E1A06086        MOV              R6, R6, LSL#1 ;invertedValue=in
                                                            vertedValue<<1;
   59 0000008C E24AA001        SUB              R10, R10, #1 ;inversionCount--;
                                                            
   60 00000090 EAFFFFF6        B                invert
   61 00000094         endInvert                            ;}
   62 00000094 E1A06806        MOV              R6, R6, LSL#16
   63 00000098 E5826000        STR              R6, [R2]    ;set LED display
   64 0000009C EB000006        BL               delay       ;delay();
   65 000000A0 EAFFFFEC        B                digitLoop
   66 000000A4         endDigitL                            ;}
   67 000000A4 EAFFFFE1        B                infiniteloop ;}
   68 000000A8         
   69 000000A8 EAFFFFFE 
                       stop    B                stop
   70 000000AC         
   71 000000AC         clearLED
   72 000000AC E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
   73 000000B0 E3A0480F        LDR              R4, =0x000F0000 
                                                            ;load diplayCode
   74 000000B4 E5814000        STR              R4, [R1]    ;clear LEDs
   75 000000B8 E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
   76 000000BC         
   77 000000BC         delay
   78 000000BC E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
   79 000000C0 E59F40C8        LDR              R4, =20000000 ;delaycount=20000
                                                            000 
   80 000000C4         dloop                                ;while(delaycount>0
                                                            ){
   81 000000C4 E2544001        SUBS             R4, R4, #1  ;delaycount--;
   82 000000C8 1AFFFFFD        BNE              dloop       ;}
   83 000000CC E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
   84 000000D0         
   85 000000D0         
   86 000000D0         ;Parameters
   87 000000D0         ;R0:Numerator
   88 000000D0         ;R1:Denominator
   89 000000D0         ;Return values
   90 000000D0         ;R2:Quotient 
   91 000000D0         ;R3:Remainder
   92 000000D0         divide



ARM Macro Assembler    Page 3 


   93 000000D0 E92D4010        STMFD            SP!, {R4, LR} ;save registers t
                                                            o stack
   94 000000D4 E3A02000        LDR              R2, =0      ;quotient=0;
   95 000000D8 E59F40B4        LDR              R4, =REMAINDER ;load address of
                                                             REMAINDER (needed 
                                                            for when dealing wi
                                                            th large numbers)
   96 000000DC E5840000        STR              R0, [R4]    ;Store Numerator in
                                                             REMAINDER memory a
                                                            ddress
   97 000000E0 E5943000        LDR              R3, [R4]    ;Remainder=REMAINDE
                                                            R i.e. the numerato
                                                            r (we do this to ta
                                                            ke in to account la
                                                            rge numbers
   98 000000E4         ;that cannot be MOVed)
   99 000000E4         while                                ;while(Numerator>=D
                                                            enominator){
  100 000000E4 E1500001        CMP              R0, R1
  101 000000E8 BA000004        BLT              endwh
  102 000000EC E0403001        SUB              R3, R0, R1  ;Remainder=Numerato
                                                            r-Denominator;
  103 000000F0 E5843000        STR              R3, [R4]    ;REMAINDER=Remainde
                                                            r
  104 000000F4 E5940000        LDR              R0, [R4]    ;Numerator=REMAINDE
                                                            R
  105 000000F8 E2822001        ADD              R2, R2, #1  ;Quotient++;
  106 000000FC EAFFFFF8        B                while
  107 00000100         endwh                                ;}
  108 00000100 E8BD8010        LDMFD            SP!, {R4, PC} ;load registers f
                                                            rom stack
  109 00000104         
  110 00000104         ;Parameters
  111 00000104         ;R0:Integer to be digitised
  112 00000104         digitise
  113 00000104 E92D41F0        STMFD            SP!, {R4-R8, LR} ;save register
                                                            s to stack
  114 00000108 E59F4088        LDR              R4,=EXPONENTS ;load start memor
                                                            y address of EXPONE
                                                            NTS
  115 0000010C E59F5078        LDR              R5, =DIGITS ;load start memory 
                                                            address of DIGITS
  116 00000110 E59F607C        LDR              R6, =REMAINDER ;load start memo
                                                            ry address of REMAI
                                                            NDER
  117 00000114 E5941000        LDR              R1, [R4]    ;Denominator=curren
                                                            tExponent;
  118 00000118 E3A07009        LDR              R7, =9      ;exponentCount=9;
  119 0000011C E3A08000        LDR              R8, =0      ; 
  120 00000120         whileDigitisable
  121 00000120 E3570000        CMP              R7, #0
  122 00000124 DA00000D        BLE              endwhDigitisable
  123 00000128 EBFFFFE8        BL               divide
  124 0000012C E3520000        CMP              R2, #0
  125 00000130 1A000000        BNE              noConvert
  126 00000134 E3A0200F        LDR              R2, =0xF
  127 00000138         noConvert
  128 00000138 0A000000        BEQ              noNumber
  129 0000013C E3A08001        MOV              R8, #1



ARM Macro Assembler    Page 4 


  130 00000140         noNumber
  131 00000140 E5863000        STR              R3, [R6]
  132 00000144 E5960000        LDR              R0, [R6]
  133 00000148 E3580000        CMP              R8, #0
  134 0000014C 0A000000        BEQ              noStore
  135 00000150 E4852004        STR              R2, [R5], #4
  136 00000154         noStore
  137 00000154 E5B41004        LDR              R1, [R4, #4]!
  138 00000158 E2477001        SUB              R7, R7, #1
  139 0000015C EAFFFFEF        B                whileDigitisable
  140 00000160         endwhDigitisable
  141 00000160 E3530000        CMP              R3, #0
  142 00000164 1A000000        BNE              notZero
  143 00000168 E3A0300F        LDR              R3, =0xF
  144 0000016C         notZero
  145 0000016C E4853004        STR              R3, [R5], #4
  146 00000170 E3A0800E        LDR              R8, =0xE
  147 00000174 E5858000        STR              R8, [R5]
  148 00000178 E8BD81F0        LDMFD            SP!, {R4-R8, PC}
  149 0000017C         
  150 0000017C FFFE1DC0 
              E0028018 
              E0028014 
              E002801C 
              00000000 
              01312D00 
              00000000 
              00000000 
              00000000 
              00000000         AREA             ProgramData, DATA, READWRITE
  151 00000000         
  152 00000000 3B9ACA00 
              05F5E100 
              00989680 
              000F4240 
              000186A0 
              00002710 
              000003E8 
              00000064 
              0000000A EXPONENTS
                               DCD              1000000000,100000000,10000000,1
000000,100000,10000,1000,100,10
  153 00000024 00000000 
                       REMAINDER
                               DCD              0
  154 00000028 00000000 
                       DIGITS  DCD              0
  155 0000002C         
  156 0000002C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\i
ntegerdisplay.d -o.\integerdisplay.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM
\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --prede
fine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 516" --list=.\list
ings\integerdisplay.lst IntegerDisplay.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

IntegerDisplay 00000000

Symbol: IntegerDisplay
   Definitions
      At line 1 in file IntegerDisplay.s
   Uses
      None
Comment: IntegerDisplay unused
clearLED 000000AC

Symbol: clearLED
   Definitions
      At line 71 in file IntegerDisplay.s
   Uses
      At line 33 in file IntegerDisplay.s
      At line 48 in file IntegerDisplay.s

delay 000000BC

Symbol: delay
   Definitions
      At line 77 in file IntegerDisplay.s
   Uses
      At line 34 in file IntegerDisplay.s
      At line 43 in file IntegerDisplay.s
      At line 64 in file IntegerDisplay.s

digitLoop 00000058

Symbol: digitLoop
   Definitions
      At line 44 in file IntegerDisplay.s
   Uses
      At line 65 in file IntegerDisplay.s
Comment: digitLoop used once
digitise 00000104

Symbol: digitise
   Definitions
      At line 112 in file IntegerDisplay.s
   Uses
      At line 12 in file IntegerDisplay.s
Comment: digitise used once
divide 000000D0

Symbol: divide
   Definitions
      At line 92 in file IntegerDisplay.s
   Uses
      At line 123 in file IntegerDisplay.s
Comment: divide used once
dloop 000000C4

Symbol: dloop
   Definitions
      At line 80 in file IntegerDisplay.s
   Uses
      At line 82 in file IntegerDisplay.s
Comment: dloop used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

endDigitL 000000A4

Symbol: endDigitL
   Definitions
      At line 66 in file IntegerDisplay.s
   Uses
      At line 47 in file IntegerDisplay.s
Comment: endDigitL used once
endInvert 00000094

Symbol: endInvert
   Definitions
      At line 61 in file IntegerDisplay.s
   Uses
      At line 56 in file IntegerDisplay.s
Comment: endInvert used once
endwh 00000100

Symbol: endwh
   Definitions
      At line 107 in file IntegerDisplay.s
   Uses
      At line 101 in file IntegerDisplay.s
Comment: endwh used once
endwhDigitisable 00000160

Symbol: endwhDigitisable
   Definitions
      At line 140 in file IntegerDisplay.s
   Uses
      At line 122 in file IntegerDisplay.s
Comment: endwhDigitisable used once
infiniteloop 00000030

Symbol: infiniteloop
   Definitions
      At line 31 in file IntegerDisplay.s
   Uses
      At line 67 in file IntegerDisplay.s
Comment: infiniteloop used once
invert 00000070

Symbol: invert
   Definitions
      At line 51 in file IntegerDisplay.s
   Uses
      At line 60 in file IntegerDisplay.s
Comment: invert used once
negative 00000050

Symbol: negative
   Definitions
      At line 41 in file IntegerDisplay.s
   Uses
      At line 38 in file IntegerDisplay.s
Comment: negative used once
noConvert 00000138

Symbol: noConvert



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 127 in file IntegerDisplay.s
   Uses
      At line 125 in file IntegerDisplay.s
Comment: noConvert used once
noNumber 00000140

Symbol: noNumber
   Definitions
      At line 130 in file IntegerDisplay.s
   Uses
      At line 128 in file IntegerDisplay.s
Comment: noNumber used once
noStore 00000154

Symbol: noStore
   Definitions
      At line 136 in file IntegerDisplay.s
   Uses
      At line 134 in file IntegerDisplay.s
Comment: noStore used once
notNegative 00000014

Symbol: notNegative
   Definitions
      At line 11 in file IntegerDisplay.s
   Uses
      At line 8 in file IntegerDisplay.s
Comment: notNegative used once
notZero 0000016C

Symbol: notZero
   Definitions
      At line 144 in file IntegerDisplay.s
   Uses
      At line 142 in file IntegerDisplay.s
Comment: notZero used once
positive 0000004C

Symbol: positive
   Definitions
      At line 39 in file IntegerDisplay.s
   Uses
      At line 36 in file IntegerDisplay.s
Comment: positive used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file IntegerDisplay.s
   Uses
      At line 4 in file IntegerDisplay.s
Comment: start used once
stop 000000A8

Symbol: stop
   Definitions
      At line 69 in file IntegerDisplay.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 69 in file IntegerDisplay.s
Comment: stop used once
while 000000E4

Symbol: while
   Definitions
      At line 99 in file IntegerDisplay.s
   Uses
      At line 106 in file IntegerDisplay.s
Comment: while used once
whileDigitisable 00000120

Symbol: whileDigitisable
   Definitions
      At line 120 in file IntegerDisplay.s
   Uses
      At line 139 in file IntegerDisplay.s
Comment: whileDigitisable used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DIGITS 00000028

Symbol: DIGITS
   Definitions
      At line 154 in file IntegerDisplay.s
   Uses
      At line 32 in file IntegerDisplay.s
      At line 115 in file IntegerDisplay.s

EXPONENTS 00000000

Symbol: EXPONENTS
   Definitions
      At line 152 in file IntegerDisplay.s
   Uses
      At line 114 in file IntegerDisplay.s
Comment: EXPONENTS used once
ProgramData 00000000

Symbol: ProgramData
   Definitions
      At line 150 in file IntegerDisplay.s
   Uses
      None
Comment: ProgramData unused
REMAINDER 00000024

Symbol: REMAINDER
   Definitions
      At line 153 in file IntegerDisplay.s
   Uses
      At line 95 in file IntegerDisplay.s
      At line 116 in file IntegerDisplay.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 18 in file IntegerDisplay.s
   Uses
      At line 25 in file IntegerDisplay.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 16 in file IntegerDisplay.s
   Uses
      At line 20 in file IntegerDisplay.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 17 in file IntegerDisplay.s
   Uses
      At line 23 in file IntegerDisplay.s
Comment: IO1SET used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file IntegerDisplay.s
   Uses
      None
Comment: main unused
1 symbol
367 symbols in table
